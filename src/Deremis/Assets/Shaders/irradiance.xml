<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleAlphaBlend</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="false" comparisonKind="LessEqual" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="true" cullMode="None" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <resources>
        <cubemap name="skybox" />
    </resources>
    <vertex>
#version 450

#include "uniforms/transform.glsl"
#include "uniforms/in_vert.glsl"

layout(location = 0) out vec3 f_position;

void main()
{
    mat4 view3x3 = mat4(
        View[0][0], View[0][1], View[0][2], 0,
        View[1][0], View[1][1], View[1][2], 0,
        View[2][0], View[2][1], View[2][2], 0,
        0, 0, 0, 1);
    vec4 clipPos = Proj * view3x3 *  vec4(Position, 1);
    gl_Position = clipPos.xyww;
    f_position = Position;
}
    </vertex>
    <fragment>
#version 450

#include "uniforms/transform.glsl"
#include "libs/math.glsl"

layout(location = 0) in vec3 f_position;
layout(location = 0) out vec4 out_Color;

layout(set = 1, binding = 0) uniform texture2D skyboxTexture;
layout(set = 1, binding = 1) uniform sampler texSampler;

void main()
{
    vec3 normal = normalize(f_position);
    vec3 irradiance = vec3(0.0); 

    vec3 up  = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up = normalize(cross(normal, right));

    float sampleDelta = 0.025;
    float nrSamples = 0.0; 
    for(float phi = 0.0; phi &lt; 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta &lt; 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal; 

            vec3 envColor = texture(sampler2D(skyboxTexture, texSampler), SampleSphericalMap(normalize(sampleVec))).rgb;
            envColor = envColor / (envColor + vec3(1.0));
            envColor = pow(envColor, vec3(1.0/2.2)); 

            irradiance += envColor * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    irradiance = PI * irradiance * (1.0 / float(nrSamples));

    out_Color = vec4(irradiance, 1.0);
}
    </fragment>
</shader>