<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleOverrideBlend</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="true" comparisonKind="LessEqual" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="false" cullMode="Back" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <outputs light="screen/phong_deferredlighting.xml">
        <output name="color" />
        <output name="position" />
        <output name="normal" />
        <output name="lightspace" />
    </outputs>
    <properties>
        <vec3 name="diffuseColor" />
    </properties>
    <resources>
        <texture2d name="diffuseTexture" />
        <texture2d name="specularTexture" />
        <texture2d name="normalTexture" isNormal="true" />
    </resources>
    <vertex>
#include "genericvert.glsl"
    </vertex>
    <fragment>
#version 450

#include "genericfrag.glsl"

layout(set = 0, binding = 1) uniform Material
{
    vec3 diffuseColor;
};

layout(set = 1, binding = 0) uniform texture2D diffuseTexture;
layout(set = 1, binding = 1) uniform texture2D specularTexture;
layout(set = 1, binding = 2) uniform texture2D normalTexture;
layout(set = 1, binding = 3) uniform sampler texSampler;

layout(location = 1) out vec4 out_Position;
layout(location = 2) out vec4 out_Normal;
layout(location = 3) out vec4 out_LightSpace;

void main()
{
    vec3 norm = texture(sampler2D(normalTexture, texSampler), f_UV).rgb;
    norm = norm * 2.0 - 1.0;
    norm = normalize(f_TBN * norm);
    out_Color.rgb = texture(sampler2D(diffuseTexture, texSampler), f_UV).rgb * diffuseColor;
    out_Color.a = texture(sampler2D(specularTexture, texSampler), f_UV).r;
    out_Position = vec4(f_position, 1.0);
    out_Normal = vec4(norm, 1.0);
    out_LightSpace = f_FragPosLightSpace;
}
    </fragment>
</shader>