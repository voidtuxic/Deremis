<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleAlphaBlend</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="false" comparisonKind="LessEqual" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="true" cullMode="None" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <resources>
        <cubemap name="skybox" />
    </resources>
    <vertex>
#version 450

#include "uniforms/transform.glsl"

layout(location = 0) in vec3 Position;
// useless but validation fails without, thank generics
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 UV;
layout(location = 3) in vec3 Tangent;
layout(location = 4) in vec3 Bitangent;

layout(location = 0) out vec3 f_position;

void main()
{
    mat4 view3x3 = mat4(
        View[0][0], View[0][1], View[0][2], 0,
        View[1][0], View[1][1], View[1][2], 0,
        View[2][0], View[2][1], View[2][2], 0,
        0, 0, 0, 1);
    gl_Position = Proj * view3x3 *  vec4(Position, 1);
    f_position = Position;
}
    </vertex>
    <fragment>
#version 450

layout(location = 0) in vec3 f_position;
layout(location = 0) out vec4 out_Color;

layout(set = 1, binding = 0) uniform textureCube skyboxTexture;
layout(set = 1, binding = 1) uniform sampler texSampler;

void main()
{    
    out_Color = texture(samplerCube(skyboxTexture, texSampler), f_position);
}
    </fragment>
</shader>