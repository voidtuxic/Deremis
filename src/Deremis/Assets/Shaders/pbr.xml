<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleAlphaBlend</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="true" comparisonKind="LessEqual" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="false" cullMode="Back" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <properties>
        <vec3 name="albedo" />
        <float name="metallic" />
        <float name="roughness" />
        <float name="ao" />
        <float name="emissiveStrength" />
    </properties>
    <resources>
        <texture2d name="albedoTexture" />
        <texture2d name="mraTexture" />
        <texture2d name="normalTexture" isNormal="true"/>
        <texture2d name="emissiveTexture"/>
        <texture2d name="environmentTexture" />
        <texture2d name="shadowMap" />
    </resources>
    <vertex>
#include "genericvert.glsl"
    </vertex>
    <fragment>
#version 450

#include "uniforms/transform.glsl"
#include "uniforms/lights.glsl"
#include "genericfrag.glsl"

layout(set = 0, binding = 1) uniform Material
{
    vec3 albedo;
    float metallic;
    float roughness;
    float ao;
    float emissiveStrength;
};

layout(set = 1, binding = 0) uniform texture2D albedoTexture;
layout(set = 1, binding = 1) uniform texture2D mraTexture;
layout(set = 1, binding = 2) uniform texture2D normalTexture;
layout(set = 1, binding = 3) uniform texture2D emissiveTexture;
layout(set = 1, binding = 4) uniform texture2D environmentTexture;
layout(set = 1, binding = 5) uniform texture2D shadowMap;
layout(set = 1, binding = 6) uniform sampler texSampler;
layout(set = 1, binding = 7) uniform sampler shadowMapSampler;

// later include to have layout definition
#include "libs/pbr.glsl"
#include "libs/normals.glsl"

void main()
{
    vec3 albedoColor = CorrectGamma(texture(sampler2D(albedoTexture, texSampler), f_UV).rgb) * albedo;
    vec3 normalDir = getNormalFromMap(f_UV, f_position, f_TBN);
    vec3 mra = texture(sampler2D(mraTexture, texSampler), f_UV).rgb;
    float metal = min(0.9, mra.r * metallic);
    float rough = mra.g * roughness;
    float aoVal = mra.b * ao;
    vec3 irradiance = clamp(texture(sampler2D(environmentTexture, texSampler), SampleSphericalMap(normalDir)).rgb, vec3(0.25), vec3(1));

    vec3 color = Calculate(f_position, normalDir, GetViewPos(), albedoColor, metal, rough, aoVal, irradiance, f_FragPosLightSpace);

    color += texture(sampler2D(emissiveTexture, texSampler), f_UV).rgb * emissiveStrength;
    out_Color = vec4(color, 1);
}
    </fragment>
</shader>