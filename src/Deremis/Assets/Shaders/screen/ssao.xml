<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleDisabled</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="false" comparisonKind="Always" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="false" cullMode="None" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <properties>
        <vec3 isArray="64" name="samples" />
    </properties>
    <resources>
        <texture2d name="positionTex" />
        <texture2d name="normalTex" isNormal="true" />
    </resources>
    <vertex>
#include "screen/genericvert.glsl"
    </vertex>
    <fragment>
#version 450

#include "uniforms/transform.glsl"
#include "libs/hash.glsl"

layout(location = 0) in vec2 f_UV;
layout(location = 0) out vec4 out_Color;

layout(set = 1, binding = 0) uniform texture2D positionTex;
layout(set = 1, binding = 1) uniform texture2D normalTex;
layout(set = 1, binding = 2) uniform sampler texSampler;

vec3 getPosition(in vec2 uv) 
{
    return texture(sampler2D(positionTex, texSampler), uv).xyz;
}

vec3 getNormal(in vec2 uv) 
{
    return texture(sampler2D(normalTex, texSampler), uv).xyz;
}

vec2 getRandom(in vec2 uv) 
{
    return normalize(hash22(uv*1000.0f) * 2.0f - 1.0f); 
}

float doAmbientOcclusion(in vec2 tcoord,in vec2 uv, in vec3 p, in vec3 cnorm, in float scale, in float bias, in float intensity, in float radius) 
{
    vec3 diff = getPosition(tcoord + uv) - p; 
    vec3 v = normalize(diff); 
    float d = length(diff)*scale; 
    float rangeCheck = smoothstep(0.0, 1.0, radius / min(0.0001, abs(diff.z)));
    return max(0.0,dot(cnorm,v)-bias)*(1.0/(1.0+d))*intensity*rangeCheck;
}

void main()
{
    const float scale = 50;
    const float intensity = 10;
    const float radius = 0.5;
    const float bias = 0.1f;
    vec2 vec[4];
    vec[0] = vec2(1,0);
    vec[1] = vec2(-1,0); 
    vec[2] = vec2(0,1);
    vec[3] = vec2(0,-1);
    const int iterations = 4; 
    float ao = 0.0f; 

    vec3 p = getPosition(f_UV); 
    vec3 n = getNormal(f_UV); 
    vec2 rand = getRandom(f_UV); 
    float rad = radius/p.z;
    for (int j = 0; j &lt; iterations; j++) 
    {
        vec2 coord1 = reflect(vec[j%4],rand)*rad; 
        vec2 coord2 = vec2(coord1.x*0.707 - coord1.y*0.707, coord1.x*0.707 + coord1.y*0.707); 
        
        ao += doAmbientOcclusion(f_UV,coord1*0.25, p, n, scale, bias, intensity, radius);
        ao += doAmbientOcclusion(f_UV,coord2*0.5, p, n, scale, bias, intensity, radius); 
        ao += doAmbientOcclusion(f_UV,coord1*0.75, p, n, scale, bias, intensity, radius); 
        ao += doAmbientOcclusion(f_UV,coord2, p, n, scale, bias, intensity, radius); 
    }
    ao /=float(iterations) * 4.0;
    ao = pow(ao, 2);
    ao = 1.0 - ao;
    
    out_Color = vec4(vec3(clamp(ao, -1 , 1)), 1.0f);
}
    </fragment>
</shader>