<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleDisabled</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="false" comparisonKind="Always" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="false" cullMode="None" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <properties>
        <vec3 isArray="64" name="samples" />
    </properties>
    <resources>
        <texture2d name="ssaoTex" />
    </resources>
    <vertex>
#include "screen/genericvert.glsl"
    </vertex>
    <fragment>
#version 450

#include "uniforms/transform.glsl"
#include "libs/hash.glsl"

layout(location = 0) in vec2 f_UV;
layout(location = 0) out vec4 out_Color;

layout(set = 1, binding = 0) uniform texture2D ssaoTex;
layout(set = 1, binding = 1) uniform sampler texSampler;

void main()
{
    vec2 texelSize = 1.0 / vec2(textureSize(sampler2D(ssaoTex, texSampler), 0));
    float result = 0.0;
    for (int x = -2; x &lt; 2; ++x) 
    {
        for (int y = -2; y &lt; 2; ++y) 
        {
            vec2 offset = vec2(float(x), float(y)) * texelSize;
            result += texture(sampler2D(ssaoTex, texSampler), f_UV + offset).r;
        }
    }
    out_Color = vec4(vec3(result / 16.0), 1.0f);
}
    </fragment>
</shader>