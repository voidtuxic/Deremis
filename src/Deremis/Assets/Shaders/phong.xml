<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleAlphaBlend</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="true" comparisonKind="LessEqual" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="false" cullMode="Back" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <properties>
        <vec3 name="lightColor" />
        <vec3 name="lightPosition" />
        <float name="ambientStrength" />
        <vec3 name="diffuseColor" />
        <float name="specularStrength" />
        <vec3 name="specularColor" />
    </properties>
    <resources>
        <texture2d name="diffuseTexture" />
    </resources>
    <vertex>
#version 450

layout(set = 0, binding = 0) uniform Transform
{
    mat4 ViewProj;
    mat4 World;
    mat4 NormalWorld;
};

layout(location = 0) in vec3 Position;
layout(location = 1) in vec3 Normal;
layout(location = 2) in vec2 UV;

layout(location = 0) out vec3 f_position;
layout(location = 1) out vec3 f_normal;
layout(location = 2) out vec2 f_UV;

void main()
{
    vec4 worldPos = World * vec4(Position, 1);
    gl_Position = ViewProj * worldPos;
    f_position = worldPos.xyz;
    f_normal = mat3(NormalWorld) * Normal;
    f_UV = UV;
}
    </vertex>
    <fragment>
#version 450

layout(set = 0, binding = 0) uniform Transform
{
    mat4 ViewProj;
    mat4 World;
    mat4 NormalWorld;
};
layout(set = 0, binding = 1) uniform Material
{
    vec3 lightColor;
    vec3 lightPosition;
    float ambientStrength;
    vec3 diffuseColor;
    float specularStrength;
    vec3 specularColor;
};
layout(set = 1, binding = 0) uniform texture2D diffuseTexture;
layout(set = 1, binding = 1) uniform sampler texSampler;

layout(location = 0) in vec3 f_position;
layout(location = 1) in vec3 f_normal;
layout(location = 2) in vec2 f_UV;

layout(location = 0) out vec4 out_Color;

void main()
{
    vec3 diffTex = texture(sampler2D(diffuseTexture, texSampler), f_UV).rgb;

    vec3 ambient = ambientStrength * lightColor;
    vec3 norm = normalize(f_normal);
    vec3 lightDir = normalize(lightPosition - f_position);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = (diff * diffuseColor * diffTex) * lightColor;

    vec3 viewPos = vec3(ViewProj[0][3], ViewProj[1][3], ViewProj[2][3]);
    vec3 viewDir = normalize(viewPos - f_position);
    vec3 reflectDir = reflect(-lightDir, norm); 
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = (specularStrength * spec * specularColor) * lightColor;

    out_Color = vec4(ambient + diffuse + specular, 1);
}
    </fragment>
</shader>