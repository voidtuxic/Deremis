<?xml version="1.0" encoding="utf-8"?>
<shader version="1">
    <config>
        <BlendState>SingleAlphaBlend</BlendState>
        <DepthStencilState depthTestEnabled="true" depthWriteEnabled="true" comparisonKind="LessEqual" />
        <RasterizerState depthClipEnabled="true" scissorTestEnabled="false" cullMode="Back" fillMode="Solid" frontFace="Clockwise" />
        <PrimitiveTopology>TriangleList</PrimitiveTopology>
    </config>
    <properties>
        <vec3 name="diffuseColor" />
        <vec3 name="specularColor" />
        <float name="ambientStrength" />
        <float name="specularStrength" />
        <float name="emissiveStrength" />
    </properties>
    <resources>
        <texture2d name="diffuseTexture" />
        <texture2d name="specularTexture" />
        <texture2d name="normalTexture" isNormal="true"/>
        <texture2d name="emissiveTexture" />
        <texture2d name="shadowMap" />
    </resources>
    <vertex>
#include "genericvert.glsl"
    </vertex>
    <fragment>
#version 450

#include "uniforms/transform.glsl"
#include "uniforms/lights.glsl"
#include "genericfrag.glsl"

layout(set = 0, binding = 1) uniform Material
{
    vec3 diffuseColor;
    vec3 specularColor;
    float ambientStrength;
    float specularStrength;
    float emissiveStrength;
};

layout(set = 1, binding = 0) uniform texture2D diffuseTexture;
layout(set = 1, binding = 1) uniform texture2D specularTexture;
layout(set = 1, binding = 2) uniform texture2D normalTexture;
layout(set = 1, binding = 3) uniform texture2D emissiveTexture;
layout(set = 1, binding = 4) uniform texture2D shadowMap;
layout(set = 1, binding = 5) uniform sampler texSampler;
layout(set = 1, binding = 6) uniform sampler shadowMapSampler;

// later include to have layout definition
#include "libs/phong.glsl"

void main()
{
    vec3 norm = texture(sampler2D(normalTexture, texSampler), f_UV).rgb;
    norm = norm * 2.0 - 1.0;
    norm = normalize(f_TBN * norm);
    mat3 dsn = mat3(
        texture(sampler2D(diffuseTexture, texSampler), f_UV).rgb * diffuseColor,
        texture(sampler2D(specularTexture, texSampler), f_UV).rgb * specularColor,
        norm
    );
    vec3 color = Calculate(dsn, f_position, f_FragPosLightSpace);

    color += texture(sampler2D(emissiveTexture, texSampler), f_UV).rgb * emissiveStrength;

    out_Color = vec4(color, 1);
}
    </fragment>
</shader>